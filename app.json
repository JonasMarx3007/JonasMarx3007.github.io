[{"name":"server.R","content":"library(ggplot2)\r\nlibrary(dplyr)\r\n\r\ntwo_sample_t_test_p_value <- function(n, cv, log2_fold_change) {\r\n  mean_y <- 1\r\n  mean_x <- mean_y * 2^log2_fold_change\r\n  \r\n  sd_x <- (cv / 100) * mean_x\r\n  sd_y <- (cv / 100) * mean_y\r\n  var_x <- sd_x^2\r\n  var_y <- sd_y^2\r\n  \r\n  pooled_var <- ((n - 1) * var_x + (n - 1) * var_y) / (2 * (n - 1))\r\n  SE <- sqrt(pooled_var * (2 / n))\r\n  t_value <- (mean_x - mean_y) / SE\r\n  df <- 2 * (n - 1)\r\n  p_value <- 2 * pt(-abs(t_value), df)\r\n  \r\n  return(p_value)\r\n}\r\n\r\nadjust_BH <- function(p_value, number, rank) {\r\n  adj_pval <- p_value * number / rank\r\n  adj_pval <- min(1, adj_pval)\r\n  return(adj_pval)\r\n}\r\n\r\ncreate_volcano_plot <- function(number, cv, n) {\r\n  set.seed(42)\r\n\r\n  means1 <- rnorm(number, mean = 1, sd = (cv / 100))\r\n  means2 <- rnorm(number, mean = 1, sd = (cv / 100))\r\n  sds1 <- abs(rnorm(number, mean = 0.2, sd = (cv / 100)))\r\n  sds2 <- abs(rnorm(number, mean = 0.2, sd = (cv / 100)))\r\n  \r\n  random_values1 <- abs(rnorm(number, mean = means1, sd = sds1))\r\n  random_values2 <- abs(rnorm(number, mean = means2, sd = sds2))\r\n  \r\n  random_data <- data.frame(random_values1, random_values2)\r\n  \r\n  random_data <- random_data %>%\r\n    mutate(log2foldchange = log2(random_values1) - log2(random_values2),\r\n           pvalue = mapply(function(x, y) two_sample_t_test_p_value(n = n, cv = runif(1, cv-(1/2*cv), cv+(1/2*cv)), log2_fold_change = log2(x) - log2(y)),\r\n                           random_values1, random_values2))\r\n  \r\n  random_data$adjpval = p.adjust(random_data$pvalue, method = \"BH\")\r\n  \r\n  random_data <- random_data %>%\r\n    mutate(log10pval = -log10(adjpval),\r\n           significance = case_when(\r\n             adjpval < 0.05 & log2foldchange > 1 ~ \"Upregulated\",\r\n             adjpval < 0.05 & log2foldchange < -1 ~ \"Downregulated\",\r\n             TRUE ~ \"Not Significant\"\r\n           ))\r\n  \r\n  ggplot(random_data, aes(x = log2foldchange, y = log10pval, color = significance)) + \r\n    geom_point(alpha = 0.5) + \r\n    scale_color_manual(values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"blue\", \"Not Significant\" = \"gray\")) +\r\n    theme_minimal() + \r\n    labs(title = \"Volcano Plot\", x = \"Log2 Fold Change\", y = \"-Log10(p-value)\") +\r\n    theme(plot.title = element_text(hjust = 0.5)) +\r\n    geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"black\") +\r\n    geom_vline(xintercept = c(-1, 1), linetype = \"dashed\", color = \"black\")\r\n}\r\n\r\nshinyServer(function(input, output) {\r\n  \r\n  output$p_value_text <- renderPrint({\r\n    p_value <- two_sample_t_test_p_value(input$n, input$cv, input$log2_fold_change)\r\n    \r\n    adj_p_value <- adjust_BH(p_value, input$number, input$rank)\r\n    \r\n    cat(\"Original P-Value:\", p_value, \"\\n\")\r\n    cat(\"Adjusted P-Value:\", adj_p_value, \"\\n\\n\\n\")\r\n    cat(\"-log10 P-Value:\", -log10(p_value), \"\\n\")\r\n    cat(\"-log10 adj. P-Value:\", -log10(adj_p_value), \"\\n\")\r\n  })\r\n  \r\n  output$volcano_plot <- renderPlot({\r\n    create_volcano_plot(input$number, input$cv, input$n)\r\n  })\r\n  \r\n})\r\n\r\n","type":"text"},{"name":"ui.R","content":"library(shiny)\r\n\r\nfluidPage(\r\n  titlePanel(\"Two Sample T-Test P-Value Calculator\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      sliderInput(\"n\", \"Sample Size (n)\", min = 3, max = 20, value = 3),\r\n      sliderInput(\"cv\", \"Coefficient of variation (%)\", min = 0, max = 200, value = 50),\r\n      sliderInput(\"log2_fold_change\", \"Log2 Fold Change\", min = 0, max = 3, value = 1, step = 0.1),\r\n      sliderInput(\"number\", \"Number\", min = 1, max = 10000, value = 1),\r\n      sliderInput(\"rank\", \"Rank\", min = 1, max = 1000, value = 1)\r\n    ),\r\n    \r\n    mainPanel(\r\n      h3(\"Result\"),\r\n      verbatimTextOutput(\"p_value_text\"),\r\n      plotOutput(\"volcano_plot\")\r\n    )\r\n  )\r\n)\r\n","type":"text"}]
