[{"name":"app.R","content":"library(shiny)\r\nlibrary(ggplot2)\r\nlibrary(dplyr)\r\nlibrary(readxl)\r\n\r\ntwo_sample_t_test_p_value <- function(n, cv, log2_fold_change) {\r\n  mean_y <- 1\r\n  mean_x <- mean_y * 2^log2_fold_change\r\n  \r\n  sd_x <- (cv / 100) * mean_x\r\n  sd_y <- (cv / 100) * mean_y\r\n  var_x <- sd_x^2\r\n  var_y <- sd_y^2\r\n  \r\n  pooled_var <- ((n - 1) * var_x + (n - 1) * var_y) / (2 * (n - 1))\r\n  SE <- sqrt(pooled_var * (2 / n))\r\n  t_value <- (mean_x - mean_y) / SE\r\n  df <- 2 * (n - 1)\r\n  p_value <- 2 * pt(-abs(t_value), df)\r\n  \r\n  return(p_value)\r\n}\r\n\r\nadjust_BH <- function(p_value, number, rank) {\r\n  adj_pval <- p_value * number / rank\r\n  adj_pval <- min(1, adj_pval)\r\n  return(adj_pval)\r\n}\r\n\r\ncreate_volcano_plot_theoretical <- function(number, cv, n) {\r\n  set.seed(42)\r\n  \r\n  means1 <- rnorm(number, mean = 1, sd = (cv / 100))\r\n  means2 <- rnorm(number, mean = 1, sd = (cv / 100))\r\n  sds1 <- abs(rnorm(number, mean = 0.2, sd = (cv / 100)))\r\n  sds2 <- abs(rnorm(number, mean = 0.2, sd = (cv / 100)))\r\n  \r\n  random_values1 <- abs(rnorm(number, mean = means1, sd = sds1))\r\n  random_values2 <- abs(rnorm(number, mean = means2, sd = sds2))\r\n  \r\n  random_data <- data.frame(random_values1, random_values2)\r\n  \r\n  random_data <- random_data %>%\r\n    mutate(log2foldchange = log2(random_values1) - log2(random_values2),\r\n           pvalue = mapply(function(x, y) two_sample_t_test_p_value(n = n, cv = runif(1, cv-(1/2*cv), cv+(1/2*cv)), log2_fold_change = log2(x) - log2(y)),\r\n                           random_values1, random_values2))\r\n  \r\n  random_data$adjpval = p.adjust(random_data$pvalue, method = \"BH\")\r\n  \r\n  random_data <- random_data %>%\r\n    mutate(log10pval = -log10(adjpval),\r\n           significance = case_when(\r\n             adjpval < 0.05 & log2foldchange > 1 ~ \"Upregulated\",\r\n             adjpval < 0.05 & log2foldchange < -1 ~ \"Downregulated\",\r\n             TRUE ~ \"Not Significant\"\r\n           ))\r\n  \r\n  ggplot(random_data, aes(x = log2foldchange, y = log10pval, color = significance)) + \r\n    geom_point(alpha = 0.5) + \r\n    scale_color_manual(values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"blue\", \"Not Significant\" = \"gray\")) +\r\n    theme_minimal() + \r\n    labs(title = \"Volcano Plot\", x = \"Log2 Fold Change\", y = \"-Log10(adj. p-value)\") +\r\n    theme(plot.title = element_text(hjust = 0.5)) +\r\n    geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"black\") +\r\n    geom_vline(xintercept = c(-1, 1), linetype = \"dashed\", color = \"black\")\r\n}\r\n\r\ntwo_sample_t_test_p_value_real <- function(n_x, mean_x, var_x, n_y, mean_y, var_y) {\r\n  pooled_var <- ((n_x - 1) * var_x + (n_y - 1) * var_y) / (n_x + n_y - 2)\r\n  SE <- sqrt(pooled_var * (1/n_x + 1/n_y))\r\n  t_value <- (mean_x - mean_y) / SE\r\n  df <- n_x + n_y - 2\r\n  p_value <- 2 * pt(-abs(t_value), df)\r\n  return(p_value)\r\n}\r\n\r\nrowwise_variance <- function(df) {\r\n  apply(df, 1, function(row) {\r\n    var_row <- var(row, na.rm = TRUE)\r\n    if (length(na.omit(row)) < 2) {\r\n      return(NA)\r\n    } else {\r\n      return(var_row)\r\n    }\r\n  })\r\n}\r\n\r\ncreate_volcano_plot_real <- function(data, n, var_mod, x, y) {\r\n  group1 <- data[, 1:x]\r\n  group2 <- data[, (x+1):(x+y)]\r\n  \r\n  mean_group1 <- rowMeans(group1, na.rm = TRUE)\r\n  mean_group2 <- rowMeans(group2, na.rm = TRUE)\r\n  \r\n  var_group1 <- rowwise_variance(group1)\r\n  var_group2 <- rowwise_variance(group2)\r\n  \r\n  count_non_na_per_row <- function(df) {\r\n    apply(df, 1, function(row) {\r\n      sum(!is.na(row))\r\n    })\r\n  }\r\n  \r\n  n_group1 <- count_non_na_per_row(group1)\r\n  n_group2 <- count_non_na_per_row(group2)\r\n  \r\n  log2_fold_changes <- mean_group2 - mean_group1\r\n  \r\n  data$log2foldchanges <- log2_fold_changes\r\n  \r\n  for (i in 1:length(data$Protein.Group)) {\r\n    if (n == 2) {\r\n      data$pval[i] <- two_sample_t_test_p_value_real(n_group1[i], mean_group1[i], var_group1[i] * var_mod, n_group2[i], mean_group2[i], var_group2[i] * var_mod)\r\n    } else {\r\n      data$pval[i] <- two_sample_t_test_p_value_real(n, mean_group1[i], var_group1[i] * var_mod, n, mean_group2[i], var_group2[i] * var_mod)\r\n    }\r\n  }\r\n  \r\n  data$adjpval <- p.adjust(data$pval, method = \"BH\")\r\n  \r\n  data <- data %>%\r\n    mutate(log10pval = -log10(adjpval),\r\n           significance = case_when(\r\n             adjpval < 0.05 & log2foldchanges > 1 ~ \"Upregulated\",\r\n             adjpval < 0.05 & log2foldchanges < -1 ~ \"Downregulated\",\r\n             TRUE ~ \"Not Significant\"\r\n           ))\r\n  \r\n  upregulated <- sum(data$significance == \"Upregulated\")\r\n  downregulated <- sum(data$significance == \"Downregulated\")\r\n  \r\n  list(plot = ggplot(data, aes(x = log2foldchanges, y = log10pval, color = significance)) + \r\n         geom_point(alpha = 0.5) + \r\n         scale_color_manual(values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"blue\", \"Not Significant\" = \"gray\")) +\r\n         theme_minimal() + \r\n         labs(title = \"Volcano Plot\", x = \"Log2 Fold Change\", y = \"-Log10(adj. p-value)\") +\r\n         theme(plot.title = element_text(hjust = 0.5)) +\r\n         geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"black\") +\r\n         geom_vline(xintercept = c(-1, 1), linetype = \"dashed\", color = \"black\"),\r\n       upregulated = upregulated,\r\n       downregulated = downregulated)\r\n}\r\n\r\nserver <- function(input, output, session) {\r\n  \r\n  uploaded_data <- reactive({\r\n    req(input$file)\r\n    read_excel(input$file$datapath)\r\n  })\r\n  \r\n  output$volcano_plot_theoretical <- renderPlot({\r\n    create_volcano_plot_theoretical(input$number, input$cv, input$n)\r\n  })\r\n  \r\n  output$volcano_plot_real <- renderPlot({\r\n    data <- uploaded_data()\r\n    plot_data <- create_volcano_plot_real(data, input$n_real, input$var_mod, input$x, input$y)\r\n    plot_data$plot\r\n  })\r\n  \r\n  output$p_value_text_theoretical <- renderPrint({\r\n    p_value <- two_sample_t_test_p_value(input$n, input$cv, input$log2_fold_change)\r\n    adj_p_value <- adjust_BH(p_value, input$number, input$rank)\r\n    \r\n    cat(\"Original P-Value:\", p_value, \"\\n\")\r\n    cat(\"Adjusted P-Value:\", adj_p_value, \"\\n\\n\\n\")\r\n    cat(\"-log10 P-Value:\", -log10(p_value), \"\\n\")\r\n    cat(\"-log10 adj. P-Value:\", -log10(adj_p_value), \"\\n\")\r\n  })\r\n  \r\n  output$upregulated_count_real <- renderText({\r\n    data <- uploaded_data()\r\n    plot_data <- create_volcano_plot_real(data, input$n_real, input$var_mod, input$x, input$y)\r\n    paste(\"Upregulated proteins:\", plot_data$upregulated)\r\n  })\r\n  \r\n  output$downregulated_count_real <- renderText({\r\n    data <- uploaded_data()\r\n    plot_data <- create_volcano_plot_real(data, input$n_real, input$var_mod, input$x, input$y)\r\n    paste(\"Downregulated proteins:\", plot_data$downregulated)\r\n  })\r\n}\r\n\r\nui <- navbarPage(\"Two Sample T-Test P-Value Calculator\",\r\n                 tabPanel(\"Theoretical Data\",\r\n                          sidebarLayout(\r\n                            sidebarPanel(\r\n                              sliderInput(\"n\", \"Sample Size (n)\", min = 3, max = 20, value = 3),\r\n                              sliderInput(\"cv\", \"Coefficient of variation (%)\", min = 0, max = 200, value = 50),\r\n                              sliderInput(\"log2_fold_change\", \"Log2 Fold Change\", min = 0, max = 3, value = 1, step = 0.1),\r\n                              sliderInput(\"number\", \"Number\", min = 1, max = 10000, value = 1),\r\n                              sliderInput(\"rank\", \"Rank\", min = 1, max = 1000, value = 1)\r\n                            ),\r\n                            mainPanel(\r\n                              h3(\"Theoretical Data Result\"),\r\n                              verbatimTextOutput(\"p_value_text_theoretical\"),\r\n                              plotOutput(\"volcano_plot_theoretical\")\r\n                            )\r\n                          )\r\n                 ),\r\n                 \r\n                 tabPanel(\"Real Data\",\r\n                          sidebarLayout(\r\n                            sidebarPanel(\r\n                              fileInput(\"file\", \"Upload Excel File\",\r\n                                        accept = c(\".xlsx\")),\r\n                              numericInput(\"x\", \"Number of Samples (Condition 1)\", value = 1, min = 1),\r\n                              numericInput(\"y\", \"Number of Samples (Condition 2)\", value = 1, min = 1),\r\n                              sliderInput(\"n_real\", \"Sample Size (n)\", min = 2, max = 20, value = 2),\r\n                              sliderInput(\"var_mod\", \"Variance modifier\", min = 0, max = 2, value = 1, step = 0.1)\r\n                            ),\r\n                            mainPanel(\r\n                              h3(\"Real Data Result\"),\r\n                              plotOutput(\"volcano_plot_real\"),\r\n                              h4(textOutput(\"upregulated_count_real\")),\r\n                              h4(textOutput(\"downregulated_count_real\"))\r\n                            )\r\n                          )\r\n                 )\r\n)\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
