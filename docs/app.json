[{"name":"app.R","content":"library(shiny)\r\nlibrary(readr)\r\nlibrary(readxl)\r\nlibrary(dplyr)\r\nlibrary(reshape2)\r\nlibrary(ggplot2)\r\nlibrary(stringr)\r\nlibrary(plotly)\r\nlibrary(tidyverse)\r\nlibrary(gprofiler2)\r\nlibrary(corrplot)\r\nlibrary(pheatmap)\r\n\r\nsource(\"functions.R\")\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Proteomics Copilot\"),\r\n  fluidRow(\r\n    column(width = 12,\r\n           tabsetPanel(\r\n             #Tab1\r\n             tabPanel(\"Data upload\",\r\n                      h4(\"Protein level data\"),\r\n                      fileInput(\"file\", \"Choose a file\", \r\n                                accept = c(\".csv\", \".tsv\", \".txt\", \".xlsx\")),\r\n                      h4(\"Full report\"),\r\n                      fileInput(\"file2\", \"Choose a file\", \r\n                                accept = c(\".csv\", \".tsv\", \".txt\", \".xlsx\")),\r\n                      tableOutput(\"table\"),\r\n                      tableOutput(\"table2\")\r\n             ),\r\n             #Tab2\r\n             tabPanel(\"Data annotation\",\r\n                      fileInput(\"upload_meta\", \"Upload Metadata\", accept = c(\".csv\", \".xlsx\", \".txt\")),\r\n                      numericInput(\"num_conditions\", \"Number of conditions:\", value = 1, min = 1),\r\n                      uiOutput(\"condition_inputs\"),\r\n                      h4(\"Is the data log2 transformed?\"),\r\n                      actionButton(\"log2_yes\", \"Yes\"),\r\n                      actionButton(\"log2_no\", \"No\"),\r\n                      numericInput(\"filter_num\", \"Filter data based on valid values per group\", value = 3, min = 1),\r\n                      actionButton(\"apply_filter\", \"Filter\"),\r\n                      tableOutput(\"displayed_data\"),\r\n                      textOutput(\"num_rows\")\r\n             ),\r\n             #Tab3\r\n             tabPanel(\"Coverage plot\",\r\n                      plotOutput(\"coveragePlot\"),\r\n                      actionButton(\"toggle_id3\", \"Toggle ID\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth3\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight3\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI3\", \"DPI:\", value = 300))\r\n                        ),\r\n                      downloadButton(\"downloadCoveragePlot\", \"Download Coverage Plot\")\r\n             ),\r\n             #Tab4\r\n             tabPanel(\"Missing value plot\",\r\n                      plotOutput(\"MissValPlot\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth4\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight4\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI4\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadMissValPlot\", \"Download Missing Value Plot\")\r\n             ),\r\n             #Tab5\r\n             tabPanel(\"Histogram intensity\",\r\n                      plotOutput(\"HistIntPlot\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth5\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight5\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI5\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadHistIntPlot\", \"Download Histogram Intesity Plot\")\r\n             ),\r\n             #Tab6\r\n             tabPanel(\"Boxplot intensity\",\r\n                      plotOutput(\"BoxIntPlot\"),\r\n                      actionButton(\"toggle_outliersBX\", \"Toggle Outliers\"),\r\n                      actionButton(\"toggle_meanBX\", \"Mean/Single\"),\r\n                      actionButton(\"toggle_id6\", \"Toggle ID\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth6\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight6\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI6\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadBoxIntPlot\", \"Download Boxplot Intesity Plot\")\r\n             ),\r\n             #Tab7\r\n             tabPanel(\"Coefficient of Variation plot\",\r\n                      plotOutput(\"CovPlot\"),\r\n                      actionButton(\"toggle_outliersCOV\", \"Toggle Outliers\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth7\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight7\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI7\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadCovPlot\", \"Download Coefficient of Variation Plot\")\r\n                      \r\n             ),\r\n             #Tab8\r\n             tabPanel(\"PCA plot\",\r\n                      plotOutput(\"PCAPlot\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth8\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight8\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI8\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadPCAPlot\", \"Download PCA Plot\")\r\n             ),\r\n             #Tab9\r\n             tabPanel(\"Abundance plot\",\r\n                      selectInput(\"condition9\", \"Choose Condition:\",\r\n                                  choices = c(\"All Conditions\"), \r\n                                  selected = \"All Conditions\"),\r\n                      plotlyOutput(\"abundancePlot\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth9\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight9\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI9\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadAbPlot\", \"Download Abundance Plot\")\r\n             ),\r\n             \r\n             #Tab10\r\n             tabPanel(\"Volcano plot\",\r\n                      fluidRow(\r\n                        column(width = 6,\r\n                               selectInput(\"condition1_10\", \"Select Condition 1:\", \r\n                                           choices = c())\r\n                        ),\r\n                        column(width = 6,\r\n                               selectInput(\"condition2_10\", \"Select Condition 2:\", \r\n                                           choices = c())\r\n                        )\r\n                      ),\r\n                      plotlyOutput(\"VolcPlot\")\r\n             ),\r\n             #Tab11\r\n             tabPanel(\"GSEA\",\r\n                      numericInput(\"top_n11\", \"Select number of top differentilly expressed gene sets shown:\", value = 10, min = 1, step = 1),\r\n                      h3(\"Upregulated Genes\"),\r\n                      plotOutput(\"UpregEnrichmentPlot\"),\r\n                      h3(\"Downregulated Genes\"),\r\n                      plotOutput(\"DownregEnrichmentPlot\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth11\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight11\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI11\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadUpPlot\", \"Download Enrichment Analysis Plot (Up)\"),\r\n                      downloadButton(\"downloadDownPlot\", \"Download Enrichment Analysis Plot (Down)\")\r\n             ),\r\n             \r\n             #Tab12\r\n             tabPanel(\"Correlation plot\",\r\n                      h4(\"Correlation plot (Pearson)\"),\r\n                      plotOutput(\"CorrPlot\"),\r\n                      actionButton(\"Change12\", \"Change Display\"),\r\n                      actionButton(\"toggle_id12\", \"Toggle ID\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth12\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight12\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI12\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadCorrPlot\", \"Download Correlation Plot\")\r\n             ),\r\n             \r\n             #Tab13\r\n             tabPanel(\"Heatmap\",\r\n                      plotOutput(\"heatPlot\"),\r\n                      actionButton(\"toggle_id13\", \"Toggle ID\"),\r\n                      fluidRow(\r\n                        column(3, numericInput(\"plotWidth13\", \"Width (cm):\", value = 20)),\r\n                        column(3, numericInput(\"plotHeight13\", \"Height (cm):\", value = 10)),\r\n                        column(3, numericInput(\"plotDPI13\", \"DPI:\", value = 300))\r\n                      ),\r\n                      downloadButton(\"downloadheatPlot\", \"Download Heatmap\")\r\n             ),\r\n             \r\n             #Tab14\r\n             tabPanel(\"Tab14\"\r\n                      \r\n             ),\r\n             \r\n             #Tab15\r\n             tabPanel(\"Tab15\"\r\n                      \r\n             ),\r\n             \r\n             #TabSummary\r\n             tabPanel(\"Summary\", \r\n                      h4(\"Data object\"),\r\n                      tableOutput(\"transformed_data2\"),\r\n                      h4(\"Meta object\"),\r\n                      tableOutput(\"meta_object\"),\r\n                      downloadButton(\"download_meta\", \"Download Metadata\")\r\n             )\r\n           )\r\n    )\r\n  )\r\n)\r\n\r\n\r\nserver <- function(input, output, session) {\r\n  options(shiny.maxRequestSize=10*1024*1024^2)\r\n  #Tab1\r\n  data <- reactive({\r\n    req(input$file)\r\n    \r\n    ext <- tools::file_ext(input$file$name)\r\n    df <- switch(ext,\r\n           csv = read_csv(input$file$datapath),\r\n           tsv = read_tsv(input$file$datapath),\r\n           txt = read_delim(input$file$datapath, delim = \"\\t\"),\r\n           xlsx = read_excel(input$file$datapath),\r\n           stop(\"Invalid file type\")\r\n    )\r\n    \r\n    df = rename_cols(df)\r\n    return(df)\r\n  })\r\n  \r\n  data2 <- reactive({\r\n    req(input$file2)\r\n    \r\n    ext <- tools::file_ext(input$file2$name)\r\n    switch(ext,\r\n           csv = read_csv(input$file2$datapath),\r\n           tsv = read_tsv(input$file2$datapath),\r\n           txt = read_delim(input$file2$datapath, delim = \"\\t\"),\r\n           xlsx = read_excel(input$file2$datapath),\r\n           stop(\"Invalid file type\")\r\n    )\r\n  })\r\n  \r\n  output$table <- renderTable({\r\n    head(data(), 5)\r\n  })\r\n  \r\n  output$table2 <- renderTable({\r\n    head(data2(), 5)\r\n  })\r\n  \r\n  #Tab2\r\n  output$condition_inputs <- renderUI({\r\n    num_conditions <- input$num_conditions\r\n    lapply(1:num_conditions, function(i) {\r\n      fluidRow(\r\n        column(width = 6,\r\n               textInput(inputId = paste0(\"condition_\", i), label = paste(\"Condition\", i))\r\n        ),\r\n        column(width = 6,\r\n               selectizeInput(\r\n                 inputId = paste0(\"columns_\", i),\r\n                 label = paste(\"Select columns for Condition\", i),\r\n                 choices = colnames(data()),\r\n                 selected = NULL,\r\n                 multiple = TRUE\r\n               )\r\n        )\r\n      )\r\n    })\r\n  })\r\n  \r\n  observe({\r\n    lapply(1:input$num_conditions, function(i) {\r\n      condition_id <- paste0(\"condition_\", i)\r\n      observeEvent(input[[condition_id]], {\r\n        updateSelectizeInput(session, paste0(\"columns_\", i), label = paste(\"Select columns for\", input[[condition_id]]))\r\n      })\r\n    })\r\n  })\r\n  \r\n  meta <- reactive({\r\n    req(data())\r\n    \r\n    if (!is.null(input$upload_meta)) {\r\n      file_ext <- tools::file_ext(input$upload_meta$name)\r\n      \r\n      if (file_ext == \"csv\") {\r\n        meta_df <- read.csv(input$upload_meta$datapath, stringsAsFactors = FALSE)\r\n      } else if (file_ext == \"xlsx\") {\r\n        meta_df <- read_excel(input$upload_meta$datapath)\r\n      } else if (file_ext == \"txt\") {\r\n        meta_df <- read_delim(input$upload_meta$datapath, delim = \"\\t\", col_types = cols())\r\n      } else {\r\n        stop(\"Wrong file type!\")\r\n      }\r\n      return(meta_df)\r\n    }\r\n    \r\n    conditions <- lapply(1:input$num_conditions, function(i) {\r\n      list(\r\n        condition = input[[paste0(\"condition_\", i)]],\r\n        columns = input[[paste0(\"columns_\", i)]]\r\n      )\r\n    })\r\n    \r\n    meta_df <- do.call(rbind, lapply(conditions, function(cond) {\r\n      data.frame(\r\n        sample = unlist(cond$columns),\r\n        condition = cond$condition,\r\n        stringsAsFactors = FALSE\r\n      )\r\n    }))\r\n    \r\n    return(meta_df)\r\n  })\r\n  \r\n  transformed_data <- reactiveVal(NULL)\r\n  \r\n  observeEvent(input$log2_yes, {\r\n    transformed_data(data())\r\n  })\r\n  \r\n  observeEvent(input$log2_no, {\r\n    req(data(), meta())\r\n    transformed_data(log2_transform_data(data(), meta()))\r\n  })\r\n  \r\n  filtered_data <- reactiveVal(NULL)\r\n  log2_filtered_data <- reactiveVal(NULL)\r\n  \r\n  observeEvent(input$apply_filter, {\r\n    req(data(), transformed_data(), meta(), input$filter_num)\r\n    filtered_data(filter_data(data(), meta(), num = input$filter_num))\r\n    log2_filtered_data(filter_data(transformed_data(), meta(), num = input$filter_num))\r\n  })\r\n  \r\n  output$displayed_data <- renderTable({\r\n    if (is.null(log2_filtered_data())) {\r\n      req(transformed_data())\r\n      head(transformed_data(), 5)\r\n    } else {\r\n      req(log2_filtered_data())\r\n      head(log2_filtered_data(), 5)\r\n    }\r\n  })\r\n  \r\n  output$num_rows <- renderText({\r\n    if (is.null(filtered_data())) {\r\n      req(transformed_data())\r\n      paste(\"Number of rows:\", nrow(transformed_data()))\r\n    } else {\r\n      req(filtered_data())\r\n      paste(\"Number of rows:\", nrow(filtered_data()))\r\n    }\r\n  })\r\n  \r\n  volcano_data <- reactive({\r\n    if (!is.null(log2_filtered_data())) {\r\n      return(log2_filtered_data())\r\n    } else {\r\n      req(transformed_data())\r\n      return(transformed_data())\r\n    }\r\n  })\r\n  #Tab3\r\n  id3 <- reactiveVal(TRUE)\r\n  \r\n  observeEvent(input$toggle_id3, {\r\n    id3(!id3())\r\n  })\r\n  \r\n  output$coveragePlot <- renderPlot({\r\n    req(data(), meta())\r\n    coverage_plot(data(), meta(), id3())\r\n  })\r\n  \r\n  output$downloadCoveragePlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"coverage_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth3\r\n      height <- input$plotHeight3\r\n      dpi <- input$plotDPI3\r\n      \r\n      ggsave(file, plot = coverage_plot(data(), meta()), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n\r\n  #Tab4\r\n  output$MissValPlot <- renderPlot({\r\n    req(data(), meta())\r\n    missing_value_plot(data(), meta())\r\n  })\r\n  \r\n  output$downloadMissValPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"missval_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth4\r\n      height <- input$plotHeight4\r\n      dpi <- input$plotDPI4\r\n      \r\n      ggsave(file, plot = missing_value_plot(data(), meta()), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n  \r\n  #Tab5\r\n  output$HistIntPlot <- renderPlot({\r\n    req(transformed_data(), meta())\r\n    histo_int(transformed_data(), meta())\r\n  })\r\n  \r\n  output$downloadHistIntPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"histint_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth5\r\n      height <- input$plotHeight5\r\n      dpi <- input$plotDPI5\r\n      \r\n      ggsave(file, plot = histo_int(transformed_data(), meta()), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n  \r\n  #Tab6\r\n  id6 <- reactiveVal(TRUE)\r\n  \r\n  observeEvent(input$toggle_id6, {\r\n    id6(!id6())\r\n  })\r\n  \r\n  outliersBX <- reactiveVal(FALSE)\r\n  meanBX <- reactiveVal(FALSE)\r\n  \r\n  observeEvent(input$toggle_outliersBX, {\r\n    outliersBX(!outliersBX())\r\n  })\r\n  \r\n  observeEvent(input$toggle_meanBX, {\r\n    meanBX(!meanBX())\r\n  })\r\n  \r\n  output$BoxIntPlot <- renderPlot({\r\n    req(transformed_data(), meta())\r\n    if (meanBX()){\r\n      boxplot_int(transformed_data(), meta(), outliers = outliersBX())\r\n    }else{\r\n      boxplot_int_single(transformed_data(), meta(), outliers = outliersBX(), id=id6()) \r\n    }\r\n  })\r\n  \r\n  output$downloadBoxIntPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"boxint_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth6\r\n      height <- input$plotHeight6\r\n      dpi <- input$plotDPI6\r\n      \r\n      if (meanBX()){\r\n        ggsave(file, plot = boxplot_int(transformed_data(), meta(), outliers = outliersBX()), device = \"png\", \r\n               width = width, height = height, units = \"cm\", dpi = dpi)\r\n      }else{\r\n        ggsave(file, plot = boxplot_int_single(transformed_data(), meta(), outliers = outliersBX()), device = \"png\", \r\n               width = width, height = height, units = \"cm\", dpi = dpi)\r\n      }\r\n    }\r\n  )\r\n  \r\n  #Tab7\r\n  outliersCOV <- reactiveVal(FALSE)\r\n  \r\n  observeEvent(input$toggle_outliersCOV, {\r\n    outliersCOV(!outliersCOV())\r\n  })\r\n  \r\n  output$CovPlot <- renderPlot({\r\n    req(data(), meta())\r\n    cov_plot(data(), meta(), outliers = outliersCOV())\r\n  })\r\n  \r\n  output$downloadCovPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"cov_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth7\r\n      height <- input$plotHeight7\r\n      dpi <- input$plotDPI7\r\n      \r\n      ggsave(file, plot = cov_plot(data(), meta(), outliers = outliersCOV()), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n  \r\n  #Tab8\r\n  output$PCAPlot <- renderPlot({\r\n    req(data(), meta())\r\n    pca_plot(data(), meta())\r\n  })\r\n  \r\n  output$downloadPCAPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"pca_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth8\r\n      height <- input$plotHeight8\r\n      dpi <- input$plotDPI8\r\n      \r\n      ggsave(file, plot = pca_plot(data(), meta()), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n  \r\n  #Tab9\r\n  observe({\r\n    req(transformed_data())\r\n    updateSelectInput(session, \"condition9\", \r\n                      choices = c(\"All Conditions\", unique(meta()$condition)))\r\n  })\r\n  \r\n  output$abundancePlot <- renderPlotly({\r\n    req(input$condition9)\r\n    if (input$condition9 == \"All Conditions\") {\r\n      abundance_plot(data(), meta())\r\n    } else {\r\n      interactive_abundance_plot(data(), meta(), input$condition9)\r\n    }\r\n  })\r\n  \r\n  output$downloadAbPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"abundance_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth9\r\n      height <- input$plotHeight9\r\n      dpi <- input$plotDPI9\r\n      \r\n      if (input$condition9 == \"All Conditions\") {\r\n        ggsave(file, plot = abundance_plot(data(), meta()), device = \"png\", \r\n               width = width, height = height, units = \"cm\", dpi = dpi)\r\n      } else {\r\n        print(\"Please work on this!\")\r\n      }\r\n    }\r\n  )\r\n  \r\n  #Tab10\r\n  observe({\r\n    req(transformed_data())\r\n    updateSelectInput(session, \"condition1_10\", \r\n                      choices = c(unique(meta()$condition)))\r\n  })\r\n  \r\n  observe({\r\n    req(transformed_data())\r\n    updateSelectInput(session, \"condition2_10\", \r\n                      choices = c(unique(meta()$condition)))\r\n  })\r\n  \r\n  output$VolcPlot <- renderPlotly({\r\n    req(volcano_data(), meta(), input$condition1_10, input$condition2_10)\r\n    volcano_plot(volcano_data(), meta(), input$condition1_10, input$condition2_10)\r\n  })\r\n  \r\n  #Tab11\r\n  different_genes_df <- reactive({\r\n    req(volcano_data(), meta(), input$condition1_10, input$condition2_10)\r\n    different_genes(volcano_data(), meta(), input$condition1_10, input$condition2_10)\r\n  })\r\n  \r\n  output$UpregEnrichmentPlot <- renderPlot({\r\n    req(different_genes_df())\r\n    enrichment_analysis(different_genes_df()$Upregulated, top_n = input$top_n11)\r\n  })\r\n  \r\n  output$DownregEnrichmentPlot <- renderPlot({\r\n    req(different_genes_df())\r\n    enrichment_analysis(different_genes_df()$Downregulated, top_n = input$top_n11)\r\n  })\r\n  \r\n  output$downloadUpPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"enrichup_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth11\r\n      height <- input$plotHeight11\r\n      dpi <- input$plotDPI11\r\n      \r\n      ggsave(file, plot = enrichment_analysis(different_genes_df()$Upregulated, top_n = input$top_n11), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n  \r\n  output$downloadDownPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"enrichdown_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth11\r\n      height <- input$plotHeight11\r\n      dpi <- input$plotDPI11\r\n      \r\n      ggsave(file, plot = enrichment_analysis(different_genes_df()$Downregulated, top_n = input$top_n11), device = \"png\", \r\n             width = width, height = height, units = \"cm\", dpi = dpi)\r\n    }\r\n  )\r\n  \r\n  #Tab12\r\n  id12 <- reactiveVal(TRUE)\r\n  \r\n  observeEvent(input$toggle_id12, {\r\n    id12(!id12())\r\n  })\r\n  \r\n  MeCorr <- reactiveVal(FALSE)\r\n  \r\n  observeEvent(input$Change12, {\r\n    MeCorr(!MeCorr())\r\n  })\r\n  \r\n  output$CorrPlot <- renderPlot({\r\n    req(data(), meta())\r\n    corr_plot(data(), meta(), MeCorr(), id12())\r\n  })\r\n  \r\n  output$downloadCorrPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"corr_plot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    \r\n    content = function(file) {\r\n      width <- input$plotWidth12 / 2.54 \r\n      height <- input$plotHeight12 / 2.54 \r\n      dpi <- input$plotDPI12\r\n      \r\n      png(file, width = width, height = height, units = \"in\", res = dpi)\r\n      corr_plot(data(), meta(), MeCorr(), id12())\r\n      dev.off()\r\n    }\r\n  )\r\n  \r\n  #Tab13\r\n  id13 <- reactiveVal(TRUE)\r\n  \r\n  observeEvent(input$toggle_id13, {\r\n    id13(!id13())\r\n  })\r\n  \r\n  output$heatPlot <- renderPlot({\r\n    req(data(), meta())\r\n    heatmap_plot(data(), meta(), id13())\r\n  })\r\n  \r\n  output$downloadheatPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"heatPlot\", Sys.Date(), \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      width <- input$plotWidth13\r\n      height <- input$plotHeight13 / 2.54 \r\n      dpi <- input$plotDPI13 / 2.54 \r\n      \r\n      png(file, width = width, height = height, units = \"in\", res = dpi)\r\n      heatmap_plot(data(), meta(), id13())\r\n      dev.off()\r\n    }\r\n  )\r\n  \r\n  #Tab14\r\n  #Tab15\r\n  \r\n  #TabSummary\r\n  output$transformed_data2 <- renderTable({\r\n    req(transformed_data())\r\n    head(transformed_data(), 5)\r\n  })\r\n  \r\n  output$meta_object <- renderTable({\r\n    head(meta(), 5)\r\n  })\r\n  \r\n  output$download_meta <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"metadata-\", Sys.Date(), \".csv\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(meta(), file, row.names = FALSE)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"functions.R","content":"library(shiny)\r\nlibrary(readr)\r\nlibrary(readxl)\r\nlibrary(dplyr)\r\nlibrary(reshape2)\r\nlibrary(ggplot2)\r\nlibrary(stringr)\r\nlibrary(plotly)\r\nlibrary(tidyverse)\r\nlibrary(gprofiler2)\r\nlibrary(corrplot)\r\nlibrary(pheatmap)\r\n\r\nextract_id <- function(sample_name) {\r\n  str_extract(sample_name, \"(?<=_)[0-9]+(?=\\\\.d)\")\r\n}\r\n\r\ncoverage_plot <- function(data, meta, id=TRUE) {\r\n  conditions = unique(meta$condition)\r\n  meta$sample <- as.character(meta$sample)\r\n  meta$id <- sapply(meta$sample, extract_id)\r\n  if (id==TRUE){\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number(), \"\\n (\", id, \")\")) %>%\r\n      ungroup()\r\n  }else{\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number())) %>%\r\n      ungroup()\r\n  }\r\n  rename_vector <- setNames(meta$new_sample, meta$sample)\r\n  colnames(data) <- ifelse(colnames(data) %in% meta$sample, rename_vector[colnames(data)], colnames(data))\r\n  annotated_columns <- meta$new_sample\r\n  data_filtered = data[, annotated_columns, drop = FALSE]\r\n  \r\n  data_filtered[!is.na(data_filtered)] <- 1\r\n  data_melted = melt(data_filtered, variable.name = \"Sample\", value.name = \"Value\")\r\n  data_annotated = merge(data_melted, meta, by.x = \"Sample\", by.y = \"new_sample\")\r\n  data_annotated$Sample <- factor(data_annotated$Sample, levels = meta$new_sample)\r\n  \r\n  p <- ggplot(data_annotated, aes(x = Sample, y = Value, fill = condition)) +\r\n    stat_summary(fun = sum, geom = \"bar\", position = \"dodge\") +\r\n    theme_minimal() +\r\n    labs(title = \"Proteins per sample\", x = \"Condition\", y = \"Number of proteins\", fill = \"Condition\") +\r\n    theme(axis.text.x = element_text(angle = 90, hjust = 1)) + \r\n    geom_hline(yintercept = length(data$ProteinNames), linetype = \"dashed\", color = \"red\")\r\n  \r\n  print(p)\r\n}\r\n\r\nmissing_value_plot <- function(data, meta) {\r\n  annotated_columns = meta$sample\r\n  data_filtered = data[, annotated_columns, drop = FALSE]\r\n  na_count = rowSums(is.na(data_filtered))\r\n  \r\n  miss_vals = as.data.frame(table(na_count))\r\n  miss_vals = miss_vals[miss_vals$na_count != length(annotated_columns), ]\r\n  \r\n  p <- ggplot(data = miss_vals, aes(x = na_count, y = Freq)) +\r\n    geom_bar(stat = \"identity\", fill = \"blue\") + \r\n    geom_text(aes(label = Freq), vjust = -0.5) +  \r\n    labs(x = \"Number of missing Values\", y = \"Frequency\", title = \"Missing value plot - protein level\") + \r\n    theme_minimal() +\r\n    theme(panel.grid.major.x = element_blank(),\r\n          panel.grid.minor.x = element_blank(),\r\n          panel.grid.minor.y = element_blank())\r\n  \r\n  print(p)\r\n}\r\n\r\nlog2_transform_data <- function(data, meta) {\r\n  annotated_columns = meta$sample\r\n  data_filtered = data[, annotated_columns, drop = FALSE]\r\n  log2_data = log2(data_filtered)\r\n  remaining_columns = setdiff(colnames(data), annotated_columns)\r\n  combined_data = cbind(log2_data, data[, remaining_columns, drop = FALSE])\r\n  return(combined_data)\r\n}\r\n\r\nhisto_int <- function(data, meta) {\r\n  annotated_columns <- meta$sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  \r\n  mean_intensities <- data.frame(condition = character(), mean_intensity = numeric(), stringsAsFactors = FALSE)\r\n  for (condition in unique(meta$condition)) {\r\n    columns <- meta$sample[meta$condition == condition]\r\n    mean_intensity <- rowMeans(data_filtered[, columns, drop = FALSE], na.rm = TRUE)\r\n    mean_intensity <- mean_intensity[is.finite(mean_intensity)]\r\n    mean_intensities <- rbind(mean_intensities, data.frame(condition = condition, mean_intensity = mean_intensity))\r\n  }\r\n  \r\n  ggplot(mean_intensities, aes(x = mean_intensity, color = condition)) +\r\n    geom_density() +\r\n    theme_minimal() +\r\n    labs(title = \"Distribution of measured intensity (log2)\",\r\n         x = \"log2 Intensity\",\r\n         y = \"Density\",\r\n         color = \"Condition\")\r\n}\r\n\r\nboxplot_int <- function(data, meta, outliers = FALSE) {\r\n  annotated_columns <- meta$sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  \r\n  mean_intensities <- data.frame(condition = character(), mean_intensity = numeric(), stringsAsFactors = FALSE)\r\n  for (condition in unique(meta$condition)) {\r\n    columns <- meta$sample[meta$condition == condition]\r\n    mean_intensity <- rowMeans(data_filtered[, columns, drop = FALSE], na.rm = TRUE)\r\n    mean_intensity <- mean_intensity[is.finite(mean_intensity)]\r\n    mean_intensities <- rbind(mean_intensities, data.frame(condition = condition, mean_intensity = mean_intensity))\r\n  }\r\n  mean_intensities$condition <- factor(mean_intensities$condition, levels = unique(meta$condition))\r\n  \r\n  ggplot(mean_intensities, aes(x = condition, y = mean_intensity, fill = condition)) +\r\n    geom_boxplot(outlier.shape = if(outliers) 16 else NA) +\r\n    theme_minimal() +\r\n    stat_boxplot(geom ='errorbar', width = 0.3) + \r\n    labs(title = \"Measured protein intesity values (log2)\",\r\n         x = \"Condition\",\r\n         y = \"log2 Intensity\",\r\n         fill = \"Condition\") +\r\n    theme(legend.position = \"none\")\r\n}\r\n\r\ncov_plot <- function(data, meta, outliers = FALSE) {\r\n  annotated_columns <- meta$sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  cv_results <- data.frame(condition = character(), CV = numeric(), stringsAsFactors = FALSE)\r\n  \r\n  for (condition in unique(meta$condition)) {\r\n    columns <- meta$sample[meta$condition == condition]\r\n    condition_data <- data_filtered[, columns, drop = FALSE]\r\n    \r\n    means <- rowMeans(condition_data, na.rm = TRUE)\r\n    sds <- apply(condition_data, 1, sd, na.rm = TRUE)\r\n    cv <- (sds / means) * 100\r\n    \r\n    if (length(columns) >= 2) {\r\n      cv_results <- rbind(cv_results, data.frame(condition = condition, CV = cv, stringsAsFactors = FALSE))\r\n    }\r\n  }\r\n  \r\n  cv_results <- cv_results[is.finite(cv_results$CV), ]\r\n  cv_results$condition <- factor(cv_results$condition, levels = unique(meta$condition))\r\n  \r\n  p <- ggplot(cv_results, aes(x = condition, y = CV, fill = condition)) +\r\n    geom_boxplot(outlier.shape = if(outliers) 16 else NA) + \r\n    theme_minimal() +\r\n    stat_boxplot(geom ='errorbar', width = 0.3) + \r\n    labs(title = \"Coefficient of Variation plot\",\r\n         x = \"Condition\",\r\n         y = \"Coefficient of Variation (%)\") +\r\n    scale_fill_brewer(palette = \"Set1\")\r\n  \r\n  return(p)\r\n}\r\n\r\nboxplot_int_single <- function(data, meta, outliers = FALSE, id=TRUE) {\r\n  meta$id <- sapply(meta$sample, extract_id)\r\n  if (id==TRUE){\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number(), \"\\n (\", id, \")\")) %>%\r\n      ungroup()\r\n  }else{\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number())) %>%\r\n      ungroup()\r\n  }\r\n  rename_vector <- setNames(meta$new_sample, meta$sample)\r\n  colnames(data) <- ifelse(colnames(data) %in% meta$sample, rename_vector[colnames(data)], colnames(data))\r\n  \r\n  annotated_columns <- meta$new_sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  intensities <- data.frame(sample = character(), intensity = numeric(), condition = character(), stringsAsFactors = FALSE)\r\n  \r\n  for (condition in unique(meta$condition)) {\r\n    columns <- meta$new_sample[meta$condition == condition]\r\n    \r\n    for (column in columns) {\r\n      intensity <- rowMeans(data_filtered[, column, drop = FALSE], na.rm = TRUE)\r\n      intensity <- intensity[is.finite(intensity)]\r\n      \r\n      intensities <- rbind(intensities, data.frame(sample = column, intensity = intensity, condition = condition))\r\n    }\r\n  }\r\n  intensities$sample <- factor(intensities$sample, levels = meta$new_sample)\r\n  \r\n  p <- ggplot(intensities, aes(x = sample, y = intensity, fill = condition)) +\r\n    geom_boxplot(outlier.shape = if (outliers) 16 else NA) +\r\n    theme_minimal() +\r\n    stat_boxplot(geom = 'errorbar', width = 0.3) + \r\n    labs(title = \"Measured protein intensity values (log2)\",\r\n         x = \"Sample\",\r\n         y = \"log2 Intensity\",\r\n         fill = \"Condition\") +\r\n    theme(legend.position = \"right\") +\r\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability\r\n  \r\n  return(p)\r\n}\r\n\r\npca_plot <- function(data, meta) {\r\n  annotated_columns <- meta$sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  data_filtered <- data_filtered[complete.cases(data_filtered), ]\r\n  \r\n  transposed_expr <- t(data_filtered)\r\n  pca_result_transposed <- prcomp(transposed_expr, scale. = TRUE)\r\n  pca_scores <- as.data.frame(pca_result_transposed$x)\r\n  pca_scores$sample <- rownames(pca_scores)\r\n  pca_scores <- merge(pca_scores, meta, by.x = \"sample\", by.y = \"sample\")\r\n  \r\n  pca <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = condition)) +\r\n    geom_point(size = 3, alpha = 0.7) +  \r\n    theme_minimal() +\r\n    labs(title = \"PCA Plot\",\r\n         x = \"Principal Component 1\",\r\n         y = \"Principal Component 2\") +\r\n    scale_color_brewer(palette = \"Set1\") +\r\n    theme(legend.position = \"right\")\r\n  \r\n  return(pca)\r\n}\r\n\r\n\r\nabundance_plot <- function(data, meta) {\r\n  annotated_columns <- meta$sample\r\n  data_filtered <- data[, c(\"ProteinNames\", annotated_columns), drop = FALSE]\r\n  mean_intensities <- data.frame(Protein = data_filtered$ProteinNames)\r\n  \r\n  for (condition in unique(meta$condition)) {\r\n    columns <- meta$sample[meta$condition == condition]\r\n    condition_data <- data_filtered[, c(\"ProteinNames\", columns), drop = FALSE]\r\n    condition_means <- rowMeans(condition_data[, columns, drop = FALSE], na.rm = TRUE)\r\n    condition_means <- log10(condition_means + 1)\r\n    mean_intensities[condition] <- condition_means\r\n  }\r\n  \r\n  mean_intensities <- mean_intensities[rowSums(is.na(mean_intensities[, -1])) < ncol(mean_intensities) - 1, ]\r\n  \r\n  long_intensities <- mean_intensities %>%\r\n    pivot_longer(-Protein, names_to = \"Condition\", values_to = \"log10Intensity\") %>%\r\n    group_by(Condition) %>%\r\n    mutate(Rank = rank(-log10Intensity, ties.method = \"first\")) %>%\r\n    ungroup()\r\n  \r\n  p <- ggplot(long_intensities, aes(x = Rank, y = log10Intensity, color = Condition)) +\r\n    geom_line() +\r\n    theme_minimal() +\r\n    labs(title = \"Abundance plot - all conditions\",\r\n         x = \"Protein Rank\",\r\n         y = \"log10 Protein Intensity\",\r\n         color = \"Condition\") +\r\n    theme(legend.position = \"right\")\r\n  \r\n  return(p)\r\n}\r\n\r\ninteractive_abundance_plot <- function(data, meta, condition) {\r\n  annotated_columns <- meta$sample[meta$condition == condition]\r\n  data_filtered <- data[, c(\"ProteinNames\", annotated_columns), drop = FALSE]\r\n  condition_means <- rowMeans(data_filtered[, annotated_columns, drop = FALSE], na.rm = TRUE)\r\n  condition_means <- log10(condition_means + 1)\r\n  \r\n  mean_intensities <- data.frame(\r\n    Protein = data_filtered$ProteinNames,\r\n    log10Intensity = condition_means\r\n  )\r\n  mean_intensities <- mean_intensities[!is.na(mean_intensities$log10Intensity), ]\r\n  \r\n  mean_intensities <- mean_intensities %>%\r\n    arrange(desc(log10Intensity)) %>%\r\n    mutate(Rank = row_number())\r\n  \r\n  p <- ggplot(mean_intensities, aes(x = Rank, y = log10Intensity, text = Protein)) +\r\n    geom_point(color = \"blue\", size = 1) +\r\n    geom_line(color = \"blue\") +\r\n    theme_minimal() +\r\n    labs(title = paste(\"Abundance plot - \", condition),\r\n         x = \"Protein Rank\",\r\n         y = \"log10 Protein Intensity\")\r\n  \r\n  p_interactive <- ggplotly(p, tooltip = \"text\")\r\n  return(p_interactive)\r\n}\r\n\r\nvline <- function(x) {\r\n  list(\r\n    type = \"line\",\r\n    y0 = 0,\r\n    y1 = 1,\r\n    yref = \"paper\", \r\n    x0 = x,\r\n    x1 = x,\r\n    line = list(color = \"green\", dash = \"dot\")\r\n  )\r\n}\r\n\r\nhline <- function(y) {\r\n  list(\r\n    type = \"line\",\r\n    x0 = 0,\r\n    x1 = 1,\r\n    xref = \"paper\",\r\n    y0 = y,\r\n    y1 = y,\r\n    line = list(color = \"green\", dash=\"dot\")\r\n  )\r\n}\r\n\r\nvolcano_plot <- function(data, meta, condition1, condition2) {\r\n  annotated_columns1 <- meta$sample[meta$condition == condition1]\r\n  annotated_columns2 <- meta$sample[meta$condition == condition2]\r\n  data_filtered <- data[, c(\"ProteinNames\", annotated_columns1, annotated_columns2), drop = FALSE]\r\n  \r\n  data_filtered <- data_filtered[rowSums(is.na(data_filtered[, -1])) < (length(annotated_columns1) + length(annotated_columns2) - 2), ]\r\n  \r\n  log2fc <- apply(data_filtered[, -1], 1, function(row) {\r\n    mean1 <- mean(as.numeric(row[annotated_columns1]), na.rm = TRUE)\r\n    mean2 <- mean(as.numeric(row[annotated_columns2]), na.rm = TRUE)\r\n    mean2-mean1\r\n  })\r\n  \r\n  pvals <- apply(data_filtered[, -1], 1, function(row) {\r\n    values1 <- na.omit(as.numeric(row[annotated_columns1]))\r\n    values2 <- na.omit(as.numeric(row[annotated_columns2]))\r\n    if (length(values1) < 2 || length(values2) < 2) {\r\n      return(NA)\r\n    }\r\n    t.test(values1, values2, var.equal = TRUE)$p.value\r\n  })\r\n  \r\n  valid_idx <- !is.na(pvals)\r\n  log2fc <- log2fc[valid_idx]\r\n  pvals <- pvals[valid_idx]\r\n  data_filtered <- data_filtered[valid_idx, ]\r\n  \r\n  adj_pvals <- p.adjust(pvals, method = \"BH\")\r\n  \r\n  volcano_data <- data.frame(\r\n    Protein = data_filtered$`ProteinNames`,\r\n    log2FC = log2fc,\r\n    pval = pvals,\r\n    adj_pval = adj_pvals\r\n  )\r\n  \r\n  sig_pval <- 0.05\r\n  sig_log2fc <- 1\r\n  \r\n  volcano_data <- volcano_data %>%\r\n    mutate(\r\n      significance = case_when(\r\n        adj_pval < sig_pval & log2FC > sig_log2fc ~ \"Upregulated\",\r\n        adj_pval < sig_pval & log2FC < -sig_log2fc ~ \"Downregulated\",\r\n        TRUE ~ \"Not significant\"\r\n      ),\r\n      neg_log10_adj_pval = -log10(adj_pval)\r\n    )\r\n  \r\n  color_mapping <- c(\"Downregulated\" = \"blue\", \"Not significant\" = \"gray\", \"Upregulated\" = \"red\")\r\n  \r\n  plot_ly(volcano_data, \r\n          x = ~log2FC, \r\n          y = ~neg_log10_adj_pval, \r\n          text = ~Protein, \r\n          type = 'scatter', \r\n          mode = 'markers',\r\n          color = ~significance,\r\n          colors = color_mapping,\r\n          marker = list(size = 5)) %>%\r\n    layout(\r\n      title = paste0(condition1, \" vs. \", condition2),\r\n      xaxis = list(\r\n        title = paste0(\"log2 fold change (\", condition2, \" - \", condition1,\")\"), \r\n        showline = F, \r\n        showgrid = T, \r\n        zeroline = FALSE\r\n      ),\r\n      yaxis = list(\r\n        title = '-log10 adj. p-value', \r\n        showline = F, \r\n        showgrid = T, \r\n        zeroline = FALSE\r\n      ),\r\n      hovermode = 'closest',\r\n      shapes = list(\r\n        vline(sig_log2fc),   \r\n        vline(-sig_log2fc),\r\n        hline(-log10(sig_pval))\r\n      )\r\n    )\r\n}\r\n\r\nfilter_data <- function(data, meta, num) {\r\n  meta$id <- sapply(meta$sample, extract_id)\r\n  meta <- meta %>%\r\n    group_by(condition) %>%\r\n    mutate(new_sample = paste0(condition, \"_\", row_number(), \"\\n (\", id, \")\")) %>%\r\n    ungroup()\r\n  \r\n  annotated_columns <- meta$sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  \r\n  rows_to_keep <- apply(data_filtered, 1, function(row) {\r\n    all(sapply(unique(meta$condition), function(condition) {\r\n      condition_columns <- meta$sample[meta$condition == condition]\r\n      sum(!is.na(row[condition_columns])) >= num\r\n    }))\r\n  })\r\n  \r\n  filtered_data <- data[rows_to_keep, , drop = FALSE]\r\n  return(filtered_data)\r\n}\r\n\r\ndifferent_genes <- function(data, meta, condition1, condition2) {\r\n  annotated_columns1 <- meta$sample[meta$condition == condition1]\r\n  annotated_columns2 <- meta$sample[meta$condition == condition2]\r\n  data_filtered <- data[, c(\"ProteinNames\", annotated_columns1, annotated_columns2), drop = FALSE]\r\n  data_filtered <- data_filtered[rowSums(is.na(data_filtered[, -1])) < (length(annotated_columns1) + length(annotated_columns2) - 2), ]\r\n  \r\n  log2fc <- apply(data_filtered[, -1], 1, function(row) {\r\n    mean1 <- mean(as.numeric(row[annotated_columns1]), na.rm = TRUE)\r\n    mean2 <- mean(as.numeric(row[annotated_columns2]), na.rm = TRUE)\r\n    mean2 - mean1\r\n  })\r\n  \r\n  pvals <- apply(data_filtered[, -1], 1, function(row) {\r\n    values1 <- na.omit(as.numeric(row[annotated_columns1]))\r\n    values2 <- na.omit(as.numeric(row[annotated_columns2]))\r\n    if (length(values1) < 2 || length(values2) < 2) {\r\n      return(NA)\r\n    }\r\n    t.test(values1, values2, var.equal = TRUE)$p.value\r\n  })\r\n  \r\n  valid_idx <- !is.na(pvals)\r\n  log2fc <- log2fc[valid_idx]\r\n  pvals <- pvals[valid_idx]\r\n  data_filtered <- data_filtered[valid_idx, ]\r\n  \r\n  adj_pvals <- p.adjust(pvals, method = \"BH\")\r\n  \r\n  result_data <- data.frame(\r\n    Protein = data_filtered$`ProteinNames`,\r\n    log2FC = log2fc,\r\n    pval = pvals,\r\n    adj_pval = adj_pvals\r\n  )\r\n  \r\n  if (\"GeneNames\" %in% colnames(data)) {\r\n    result_data$Gene <- data$GeneNames[valid_idx]\r\n  } else {\r\n    result_data$Gene <- NA\r\n  }\r\n  \r\n  sig_pval <- 0.05\r\n  sig_log2fc <- 1\r\n  \r\n  upregulated_genes <- result_data %>%\r\n    filter(adj_pval < sig_pval & log2FC > sig_log2fc) %>%\r\n    pull(ifelse(\"Gene\" %in% colnames(result_data), Gene, Protein))\r\n  \r\n  downregulated_genes <- result_data %>%\r\n    filter(adj_pval < sig_pval & log2FC < -sig_log2fc) %>%\r\n    pull(ifelse(\"Gene\" %in% colnames(result_data), Gene, Protein))\r\n  \r\n  return(list(Upregulated = upregulated_genes, Downregulated = downregulated_genes))\r\n}\r\n\r\nenrichment_analysis <- function(gene_list, top_n = 10) {\r\n  gene_list <- na.omit(gene_list)\r\n  res <- gost(query = gene_list, organism = \"hsapiens\", sources = c(\"GO:CC\", \"GO:BP\", \"GO:MF\"), user_threshold = 0.05, correction_method=\"g_SCS\")\r\n  \r\n  res_df <- res$result %>%\r\n    mutate(\r\n      hits = intersection_size,\r\n      hitsPerc = intersection_size / term_size * 100,\r\n      pval = p_value\r\n    ) %>%\r\n    arrange(pval)\r\n  \r\n  if (nrow(res_df) == 0) {\r\n    return(NULL)\r\n  }\r\n  \r\n  ggplot(res_df %>% top_n(-top_n, wt = pval), \r\n         aes(x = hitsPerc, \r\n             y = reorder(term_name, -pval),\r\n             colour = pval, \r\n             size = hits)) +\r\n    geom_point() +\r\n    expand_limits(x = 0) +\r\n    labs(x = \"Hits (%)\", \r\n         y = \"GO term\", \r\n         colour = \"p value\", \r\n         size = \"Count\") +\r\n    theme_minimal() +\r\n    scale_color_gradient(low = \"blue\", high = \"red\") + \r\n    ggtitle(\"Gene Set Enrichment Analysis\") \r\n}\r\n\r\ncorr_plot <- function(data, meta, method=FALSE, id=TRUE) {\r\n  conditions <- unique(meta$condition)\r\n  meta$sample <- as.character(meta$sample)\r\n  meta$id <- sapply(meta$sample, extract_id)\r\n  if (id==TRUE){\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number(), \"\\n (\", id, \")\")) %>%\r\n      ungroup()\r\n  }else{\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number())) %>%\r\n      ungroup()\r\n  }\r\n  rename_vector <- setNames(meta$new_sample, meta$sample)\r\n  colnames(data) <- ifelse(colnames(data) %in% meta$sample, rename_vector[colnames(data)], colnames(data))\r\n  annotated_columns <- meta$new_sample\r\n  data_filtered <- data[, annotated_columns, drop = FALSE]\r\n  \r\n  correlation_matrix <- cor(data_filtered, use = \"pairwise.complete.obs\", method = \"pearson\")\r\n  hc <- hclust(as.dist(1 - correlation_matrix), method = \"complete\")\r\n  \r\n  par(mar = c(0.1, 0.1, 0.1, 0.1))  \r\n  \r\n  if (method==FALSE){\r\n    corrplot(correlation_matrix[hc$order, hc$order], \r\n             method = \"color\",          \r\n             type = \"full\",            \r\n             order = \"original\",         \r\n             tl.col = \"black\",          \r\n             tl.srt = 45,               \r\n             tl.cex = 0.6,              \r\n             number.cex = 0.6,          \r\n             tl.pos = \"lt\")\r\n  } else {\r\n  corrplot(correlation_matrix[hc$order, hc$order], \r\n           method = \"ellipse\",          \r\n           type = \"full\",            \r\n           order = \"original\",         \r\n           tl.col = \"black\",          \r\n           tl.srt = 45,               \r\n           tl.cex = 0.6,              \r\n           number.cex = 0.6,          \r\n           tl.pos = \"lt\")\r\n  }\r\n}\r\n\r\nrename_cols <- function(df){\r\n  if (\"PG.ProteinNames\" %in% names(df)){\r\n    df <- df %>%\r\n      rename(\r\n        ProteinNames = PG.ProteinNames,\r\n      )\r\n  }\r\n  if (\"PG.Genes\" %in% names(df)){\r\n    df <- df %>%\r\n      rename(\r\n        GeneNames = PG.Genes,\r\n      )\r\n  }\r\n  if (\"Protein.Names\" %in% names(df)){\r\n    df <- df %>%\r\n      rename(\r\n        ProteinNames = Protein.Names,\r\n      )\r\n  }\r\n  if (\"Genes\" %in% names(df)){\r\n    df <- df %>%\r\n      rename(\r\n        GeneNames = Genes,\r\n      )\r\n  }\r\n  return(df)\r\n}\r\n\r\nheatmap_plot <- function(data, meta, id=TRUE) {\r\n  conditions = unique(meta$condition)\r\n  meta$sample <- as.character(meta$sample)\r\n  meta$id <- sapply(meta$sample, extract_id)\r\n  if (id==TRUE){\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number(), \"\\n (\", id, \")\")) %>%\r\n      ungroup()\r\n  }else{\r\n    meta <- meta %>%\r\n      group_by(condition) %>%\r\n      mutate(new_sample = paste0(condition, \"_\", row_number())) %>%\r\n      ungroup()\r\n  }\r\n  rename_vector <- setNames(meta$new_sample, meta$sample)\r\n  colnames(data) <- ifelse(colnames(data) %in% meta$sample, rename_vector[colnames(data)], colnames(data))\r\n  annotated_columns <- meta$new_sample\r\n  data_filtered = data[, annotated_columns, drop = FALSE]\r\n  data_col_names <-colnames(data_filtered)\r\n  \r\n  data_for_clustering <- t(apply(data_filtered, 1, function(row) {\r\n    if (any(is.na(row))) {\r\n      row[is.na(row)] <- mean(row, na.rm = TRUE)\r\n    }\r\n    return(row)\r\n  }))\r\n  \r\n  if (\"row\" %in% \"row\") {\r\n    data_for_clustering <- t(apply(data_for_clustering, 1, function(row) {\r\n      scaled_row <- scale(row)\r\n      if (any(is.nan(scaled_row)) || any(is.infinite(scaled_row))) {\r\n        return(rep(0, length(scaled_row)))  # Replace problematic rows with zeros\r\n      }\r\n      return(scaled_row)\r\n    }))\r\n  }\r\n  \r\n  \r\n  if (\"row\" %in% \"row\") {\r\n    data_filtered <- t(apply(data_filtered, 1, function(row) {\r\n      scaled_row <- scale(row)\r\n      if (any(is.nan(scaled_row)) || any(is.infinite(scaled_row))) {\r\n        return(rep(0, length(scaled_row)))  # Replace problematic rows with zeros\r\n      }\r\n      return(scaled_row)\r\n    }))\r\n    colnames(data_filtered) <- data_col_names\r\n  }\r\n  \r\n  annotation_col <- data.frame(condition = meta$condition[match(data_col_names, meta$new_sample)])\r\n  rownames(annotation_col) <- data_col_names\r\n  \r\n  palette <- colorRampPalette(c(\"navy\", \"white\", \"firebrick3\"))(50)\r\n  na_color <- \"grey\"\r\n  \r\n  row_dist <- dist(data_for_clustering)\r\n  row_clust <- hclust(row_dist)\r\n  col_dist <- dist(t(data_for_clustering))\r\n  col_clust <- hclust(col_dist)\r\n  \r\n  p=pheatmap(data_filtered,\r\n                  cluster_rows = row_clust, \r\n                  cluster_cols = col_clust, \r\n                  na_col = na_color, \r\n                  color = palette, \r\n                  annotation_col = annotation_col, \r\n                  annotation_names_col = FALSE)\r\n  return(p)\r\n}","type":"text"}]
